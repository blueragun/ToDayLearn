HR = read.csv("D:\다운로드\data\HR_comma_sep.csv")
head(HR, n = 3)
HR = read.csv("D:\\다운로드\\data\\HR_comma_sep.csv")
head(HR, n = 3)
str(HR)
summary(HR)
summary(HR$left)
HR$work_accident=as.factor(HR$work_accident)
HR$lfetHR$left=as.factor(HR$left)
HR$left=as.factor(HR$left)
HR$promotion_last_5years=as.factor(HR$promotion_last_5years)\
HR$promotion_last_5years=as.factor(HR$promotion_last_5years)\
HR$promotion_last_5years=as.factor(HR$promotion_last_5years)
HR$Work_accident=as.factor(HR$Work_accident)
summary(HR$left)
HR$satisfaction_level_group_1 = ifelse(HR$satisfaction_level > 0.5, 'High', 'Low')
HR$satisfaction_level_group_1 = as.factor(HR$satisfaction_level_group_1)
summary(HR$satisfaction_level_group_1)
HR$satisfaction_level_group_2 = ifelse(HR$satisfaction_level > 0.8, 'High',
                                   ifelse(HR$satisfaction_level > 0.5,'Mid','Low'))
HR$satisfaction_level_group_2 = as.factor(HR$satisfaction_level_group_2)
summary(HR$satisfaction_level_group_2)
HR_High = subset(HR,salary == 'high')
summary(HR_High$salary)
HR$Work_accident=as.factor(HR$Work_accident)
HR$salary=as.factor(HR$salary)
HR$sales=as.factor(HR$sales)
HR_High = subset(HR,salary == 'high')
summary(HR_High$salary)
HR_High_IT = subset(HR,salary == 'high' & sales == 'IT')
print(xtabs(~ HR_High_IT&sales + HR_High_IT&salary)
print(xtabs(~ HR_High_IT&sales + HR_High_IT&salary)
print(xtabs(~ HR_High_IT&sales + HR_High_IT&salary))
print(xtabs(~ HR_High_IT$sales + HR_High_IT$salary))
HR_High_IT2 = subset(HR,salary == 'high' | sales == 'IT')
print(xtabs(~ HR_High_IT2$sales + HR_High_IT2$salary))\
print(xtabs(~ HR_High_IT2$sales + HR_High_IT2$salary))
install.packages("plyr")
library(plyr)
SS=ddply(HR, # 분석할 Data Set 설정
         c("sales","salary"),summarise, # 집계 기준 변수 설정
         M_SF = mean(satisfaction_level), # 컬럼명 및 계산 함수 설정
         COUNT =length(sales), 
         M_WH = round(mean(average_montly_hours),2))
SS=ddply(HR,
         c('sales', 'salary'), summaries,
         M_SF = mean(satisfaction_level),
         COUNT = length(sales),
         M_WH = round(mean(average_montly_hours),2))
SS=ddply(HR,
         c("sales", "salary"),summaries,
         M_SF = mean(satisfaction_level),
         COUNT = length(sales),
         M_WH = round(mean(average_montly_hours),2))
SS=ddply(HR,
         c("sales", "salary"),summarise,
         M_SF = mean(satisfaction_level),
         COUNT = length(sales),
         M_WH = round(mean(average_montly_hours),2))
ss
SS
library(ggthemes)
library(ggplot2)
library(ggthemes)
HR$salary = factor(HR$salary,levels = c("low","medium","high"))
ggplot(HR)
ggplot(HR,aes(x = salary))
ggplot(HR,aes(x=salary)) +  
  geom_bar()
ggplot(HR,aes(x=salary)) +  
  geom_bar(fill = 'royalblue') 
ggplot(HR,aes(x=salary)) +  
  geom_bar(aes(fill=salary))
ggplot(HR,aes(x=salary)) +  
  geom_bar(aes(fill=left))
ggplot(HR,aes(x=satisfaction_level))+
 geom_histogram()
ggplot(HR,aes(x=satisfaction_level))+
  geom_histogram(binwidth = 0.01,col='red',fill='royalblue') 
ggplot(HR,aes(x=satisfaction_level))+
 geom_density()
ggplot(HR,aes(x=satisfaction_level))+
  geom_density(col='red',fill='royalblue')
ggplot(HR,aes(x=left,y=satisfaction_level)) +
 geom_boxplot(aes(fill = left)) +ggplot(HR,aes(x=left,y=satisfaction_level)) +
 geom_boxplot(aes(fill = left)) +
 xlab("이직여부") + ylab("만족도") + ggtitle("Boxplot") +
 labs(fill = "이직 여부")
ggplot(HR,aes(x=left,y=satisfaction_level)) +
 geom_boxplot(aes(fill = left)) +
 xlab("이직여부") + ylab("만족도") + ggtitle("Boxplot") +
 labs(fill = "이직 여부")
ggplot(HR,aes(x=left,y=satisfaction_level)) +
  geom_boxplot(aes(fill = left),alpha = I(0.4)) + 
  geom_jitter(aes(col = left),alpha = I(0.4)) + 
  xlab("이직여부") + ylab("만족도") + ggtitle("Boxplot") +
  labs(fill = "이직 여부", col = "이직 여부") 
ggplot(HR,aes(x=left,y=satisfaction_level)) +
  geom_boxplot(aes(fill = salary),alpha = I(0.4),outlier.colour = 'red') +
  xlab("이직여부") + ylab("만족도") + ggtitle("Boxplot") +
  labs(fill = "임금 수준") 
ggplot(HR,aes(x=average_montly_hours,y=satisfaction_level))+
  geom_point()
ggplot(HR,aes(x=average_montly_hours,y=satisfaction_level))+
  geom_point(aes(col = left)) + 
  labs(col = '이직 여부') + xlab("평균 근무시간") + ylab("만족도")
summary(HR$salary)
summary(HR$satisfaction_level)
quantile(HR$satisfaction_level,probs = c(0.1,0.3,0.6,0.9)) 
sum(HR$satisfaction_level)
mean(HR$last_evaluation)
sd(HR$satisfaction_level)
colMeans(HR[1:5])
colSums(HR[1:5])
TABLE = as.data.frame(table(HR$sales))
TABLE
TABLE2 = as.data.frame(xtabs(~ HR$salary + HR$sales))
TABLE2
mean(HR$last_evaluation)
sd(HR_last_evaluation)
sd(HR$last_evaluation)
TABLE3 = as.data.frame(table(HR$sales))
TABLE3
TABLE4 = as.data.frame(xtabs(~HR$left+HR$salary))
TABLE4
IMDB = read.csv("D:\\다운로드\\data\\IMDB-Movie-Data.csv")
is.na(IMDB$Metascore)[1:20]
sum(is.na(IMDB$Metascore)) 
colSums(is.na(IMDB)
colSums(is.na(IMDB))
IMDB2 = na.omit(IMDB)
colSums(is.na(IMDB2))
IMDB3 = IMDB[complete.cases(IMDB[ ,12]),]
colSums(is.na(IMDB3))
IMDB$Metascore2 = IMDB$Metascore 
IMDB$Metascore2[is.na(IMDB$Metascore2)]=58.99
IMDB$Metascore2
mean(IMDB$Revenue..Millions.)
mean(IMDB$Revenue..Millions.,na.rm = TRUE)
ggplot(IMDB,aes(x=Revenue..Millions.)) +
geom_histogram(fill='royalblue', alpha = 0.4) +
ylab('') +
xlab("Revenue_Millions") +
theme_classic()
ggplot(IMDB,aes(x = "",y=Revenue..Millions.)) +
geom_boxplot(fill='red', alpha = 0.4,outlier.color = 'red') +
xlab('') +
ylab("Revenue_Millions") +
theme_classic()
summary(IMDB$Revenue..Millions.)
ggplot(IMDB,aes(x=as.factor(Year),y=Revenue..Millions.))+
  geom_boxplot(aes(fill=as.factor(Year)),outlier.colour = 'red',alpha=I(0.4))+
  xlab("년도") + ylab("수익") + guides(fill = FALSE) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 90))
Q1 = quantile(IMDB$Revenue..Millions.,probs = c(0.25),na.rm = TRUE) 
Q3 = quantile(IMDB$Revenue..Millions.,probs = c(0.75),na.rm = TRUE)
LC = Q1 - 1.5 * (Q3 - Q1) # 아래 울타리
UC = Q3 + 1.5 * (Q3 - Q1) # 위 울타리
IMDB2 = subset(IMDB,
     Revenue..Millions. >  LC & Revenue..Millions. < UC)
IMDB2
substr(IMDB$Actors[1],1,5)
paste(IMDB$Actors[1],"_",'A')
paste(IMDB$Actors[1],"_",'A',sep="")
paste(IMDB$Actors[1],"_","Example",sep="|")
strsplit(as.character(IMDB$Actors[1]), split= ",") 
IMDB$Genre2=gsub(","," ",IMDB$Genre)
library(tm)
install.packages('tm')
library(tm)
library(tm)
CORPUS = Corpus(VectorSource(IMDB$Genre2))
CORPUS_TM = tm_map(CORPUS,removePunctuation)
CORPUS_TM = tm_map(CORPUS_TM, removeNumbers)
CORPUS_TM = tm_map(CORPUS_TM, tolower)
CORPUS_TM
TDM=DocumentTermMatrix(CORPUS_TM)
inspect(TDM)
TDM = as.data.frame(as.matrix(TDM))
head(TDM)
IMDB_GENRE = cbind(IMDB,TDM)
CORPUS=Corpus(VectorSource(IMDB$Description))
CORPUS_TM = tm_map(CORPUS,stripWhitespace)
CORPUS_TM = tm_map(CORPUS_TM,removePunctuation)
CORPUS_TM = tm_map(CORPUS_TM, removeNumbers)
CORPUS_TM = tm_map(CORPUS_TM, tolower)
DTM = DocumentTermMatrix(CORPUS_TM)
inspect(DTM)
CORPUS_TM = tm_map(CORPUS_TM,removeWords, 
         c(stopwords("english"),"my","custom","words"))
convert_count = function(x) {
y <- ifelse(x > 0,x,0)
y = as.numeric(y)
y
}
TDM = TermDocumentMatrix(CORPUS_TM)
m =  as.matrix(TDM) 
v = sort(rowSums(m),decreasing=TRUE) # 빈도수를 기준으로 내림차순 정렬
d = data.frame(word = names(v),freq=v)
library("SnowballC")
install.packages('SnowballC')
install.packages('wordcloud')
install.packages('RColorBrewer')
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
wordcloud(words = d$word, freq = d$freq, min.freq = 5,  
max.words=200, random.order=FALSE,
colors=brewer.pal(8, "Dark2"))
ggplot(d[1:10,]) +
  geom_bar(aes(x = reorder(word,freq), y = freq), stat = 'identity') +
  coord_flip()+ xlab("word") + ylab("freq") +
  theme_bw()
install.packages('dplyr')
install.packages('reshape')
install.packages('plyr')
save.image("D:\\Lecture\\ToDayLearn\\ToDayLearn\\R실습\\ch345장")
